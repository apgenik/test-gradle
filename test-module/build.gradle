plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.5.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.example.Main' // Указываем главный класс для плагина application
}

jar {
    manifest {
        attributes 'Main-Class': 'org.example.Main'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
    downloadLiquibaseJars
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'

    // tag::actuator[]
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // end::actuator[]
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    //downloadJars 'group:artifact:version'
    downloadLiquibaseJars 'org.liquibase:liquibase-core:4.31.0'
}

// Объединенная задача
tasks.register('processLiquibase', Zip) {
    // Шаг 1: Загрузка и копирование JAR-файлов
    from(configurations.downloadLiquibaseJars) {
        into './'
    }

    // Шаг 2: Копирование и переименование файлов из resources
    from('./src/main/resources') {
        into './'
        rename { fileName ->
            if (fileName == 'changelog.yaml') {
                return 'changelog_0001.yaml'
            }
            return fileName
        }
    }

    // Шаг 3: Архивирование
    archiveFileName = "out.zip"
    destinationDirectory = file("$projectDir")

}

tasks.register('downloadAndCopyLiquibaseJars', Copy) {
    from configurations.downloadLiquibaseJars
    into file("./out")
}

tasks.register('copyLiquibaseFiles', Copy) {
    dependsOn downloadAndCopyLiquibaseJars
    from './src/main/resources'
    into './out'

    rename { fileName ->
        if (fileName == 'changelog.yaml') {
            return 'changelog_0001.yaml'
        }
        return fileName
    }
}

task zipLiquibaseArchive(type: Zip) {
    dependsOn copyLiquibaseFiles
    from "$projectDir/out"
    archiveFileName = "out.zip"
    destinationDirectory = file("$projectDir")
}

tasks.register('cleanOut', Delete) {
    delete "$projectDir/out", "$projectDir/out.zip"
}

tasks.build {
    dependsOn zipLiquibaseArchive
}

tasks.clean {
    dependsOn cleanOut
}

tasks.named('test') {
    useJUnitPlatform()
}
